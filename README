This directory contains programs which related to marching cubes algorithm.
Download from http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/

==================
marchingsource.cpp
==================
Very original marching cubes example program by Cory Bloyd.

To compile this, firstly you should install OpenGL and GLUT libraries.
Then type this commands (change include and library path if needed):

% g++ marchingsource.cpp -o marchingsource -I/usr/X11/include -L/usr/X11/lib -lglut -GLU -lGL -Xmu -lXi -lXext -lX11 -lm

* NOTE: now it cannot run on macbook because of link of libglut

vMarchCube*() is main routine to operate marching cubes. There are two version of it.
vMarchCube1() performs marching cubes algorithm and vMarchCube2() calls vMarchTetrahedron()
inside it. vKeyboard() selects which version we use. vMarchCube*() works for each point 
in data set. And vMarchingCubes() iterates vMarchCube*() for all over the data sets.

The data set size is setted to iDataSetSize. <how to insert original data sets ?>

Each version of vMarchCube*() simply draws result of calcuration in end of it. So you 
have to modifire these codes to save caluculated results into some array or matrix 
if you'd like to use that values in other programs.

Functions in marchingsource.cpp
- int main(int argc, char **argv)
- GLvoid vPrintHelp()
- void vResize( GLsizei iWidth, GLsizei iHeight )
- void vKeyboard(unsigned char cKey, int iX, int iY)
- void vSpecial(int iKey, int iX, int iY)
- void vIdle()
- void vDrawScene()
- GLfloat fGetOffset(GLfloat fValue1, GLfloat fValue2, GLfloat fValueDesired)
- GLvoid vGetColor(GLvector &rfColor, GLvector &rfPosition, GLvector &rfNormal)
- GLvoid vNormalizeVector(GLvector &rfVectorResult, GLvector &rfVectorSource)
- GLvoid vSetTime(GLfloat fNewTime)
- GLfloat fSample1(GLfloat fX, GLfloat fY, GLfloat fZ)
- GLfloat fSample2(GLfloat fX, GLfloat fY, GLfloat fZ)
- GLfloat fSample3(GLfloat fX, GLfloat fY, GLfloat fZ)
- GLvoid vGetNormal(GLvector &rfNormal, GLfloat fX, GLfloat fY, GLfloat fZ)
- GLvoid vMarchCube1(GLfloat fX, GLfloat fY, GLfloat fZ, GLfloat fScale)
- GLvoid vMarchTetrahedron(GLvector *pasTetrahedronPosition, GLfloat *pafTetrahedronValue)
- GLvoid vMarchCube2(GLfloat fX, GLfloat fY, GLfloat fZ, GLfloat fScale)
- GLvoid vMarchingCubes()


==================
table2.txt
==================
Descripted as "Another table by Geoffrey Heller".
I'm not sure but maybe this is a alternative of a2iTriangleConnectionTable in 
marchingsource.cpp. 

==================
rchandra
==================
C++ inplementation which based marchingsource.cpp.
It presents a class CIsoSurface which generates isosurface from a scalar field.
Vectors.h is used from CIsoSurface.h.

CIsoSurface seems interface, so you might inherit it. In CIsoSurface, public methods 
are constructor and destructor, GenerateSurface(), IsSurfaceValid(), DeleteSurface() 
and GetVolumeLengths(), and GenerateSurface() is main routine to generate surface, 
others are utility function. The input of GenerateSurface() is array of ptScalarField, 
whose type is T (CIsoSurface is template class). And result of GenerateSurface() 
would be contained into m_bValidSurface, which type is T and protected member. 
Therefore you should inherit CIsoSurface and write a functions to set input data to 
m_ptScalarField and take or draw output data from m_tIsoLevel.

Input fromat is:
- 3 demensional Array. 
- Each demension corresponds to X, Y, Z axis.
- Each element of it is depth value, which type is short or float.
Note that I suspect this format by GenerateSurface() function. Hense I'm not sure
the standard of formant of volume data and wheter this is so or not.

==================
openGLSourceCode
==================
Descripted as "OpenGL source code". It uses poulslib.

==================
Cell
==================
Smaple volume data.

==================
volexample
==================
This program descripts useage of poulslib.h. I have no idea what is poulslib but it
seems another implementaion of marching cubes. 
